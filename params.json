{"name":"Wuzzy","tagline":"Simularity identification in JS","body":"# Overview\r\n\r\nWuzzy was created to provide a smattering of some similarity identification stuff. Several simularity identification algorithm implementations are provided, including:\r\n\r\n* Jaccard similarity coefficient\r\n* Tanimoto coefficient\r\n* Pearson correlation\r\n* N-gram edit distance\r\n* Levenshtein distance\r\n* Jaro-Winkler distance\r\n\r\nFuzzy wuzzy was a bear, fuzzy wuzzy had no hair, fuzzy wuzzy wasn't very fuzzy, was he? Well, if you aren't sure maybe this library can help! :) \r\n\r\n# Methods\r\nAll bad jokes aside, below is a listing of the available functions. Have fun!\r\n\r\n## jarowinkler(a, b, t)\r\n\r\nComputes the jaro-winkler distance for two given arrays.\r\n\r\nNOTE: this implementation is based on the one found in the\r\nLucene Java library.\r\n### Examples:\r\n\r\n    wuzzy.jarowinkler(\r\n            ['D', 'W', 'A', 'Y', 'N', 'E'],\r\n            ['D', 'U', 'A', 'N', 'E']\r\n        );\r\n        // -> 0.840\r\n\r\n    wuzzy.jarowinkler(\r\n            'DWAYNE',\r\n            'DUANE'\r\n        );\r\n        // -> 0.840\r\n\r\n### Params: \r\n\r\n* **String|Array** *a* - the first string/array to compare\r\n* **String|Array** *b* - the second string/array to compare\r\n* **Number** *t* - the threshold for adding\r\n\r\n### Return:\r\n\r\n* **Number** returns the jaro-winkler distance for\r\n\r\n## levenshtein(a, b, w)\r\n\r\nCalculates the levenshtein distance for the\r\ntwo provided arrays and returns the normalized\r\ndistance.\r\n### Examples:\r\n\r\n    wuzzy.levenshtein(\r\n            ['D', 'W', 'A', 'Y', 'N', 'E'],\r\n            ['D', 'U', 'A', 'N', 'E']\r\n        );\r\n        // -> 0.66666667\r\n\r\n        or\r\n\r\n    wuzzy.levenshtein(\r\n            'DWAYNE',\r\n            'DUANE'\r\n        );\r\n        // -> 0.66666667\r\n\r\n### Params: \r\n\r\n* **String|Array** *a* - the first string/array to compare\r\n* **String|Array** *b* - the second string/array to compare\r\n* **Object** *w* - (optional) a set of key/value pairs\r\n\r\n### Return:\r\n\r\n* **Number** returns the levenshtein distance for\r\n\r\n## ngram(a, b, ng)\r\n\r\nComputes the n-gram edit distance for any n (defaults to 2).\r\n\r\nNOTE: this implementation is based on the one found in the\r\nLucene Java library.\r\n### Examples:\r\n\r\n    wuzzy.ngram(\r\n            ['D', 'W', 'A', 'Y', 'N', 'E'],\r\n            ['D', 'U', 'A', 'N', 'E']\r\n        );\r\n        // -> 0.583\r\n\r\n        or\r\n\r\n    wuzzy.ngram(\r\n            'DWAYNE',\r\n            'DUANE'\r\n        );\r\n        // -> 0.583\r\n\r\n### Params: \r\n\r\n* **String|Array** *a* - the first string/array to compare\r\n* **String|Array** *b* - the second string/array to compare\r\n* **Number** *ng* - (optional) the n-gram size to work with (defaults to 2)\r\n\r\n### Return:\r\n\r\n* **Number** returns the ngram distance for\r\n\r\n## pearson(a, b)\r\n\r\nCalculates a pearson correlation score for two given\r\nobjects (compares values of similar keys).\r\n### Examples:\r\n\r\n    wuzzy.pearson(\r\n            {a: 2.5, b: 3.5, c: 3.0, d: 3.5, e: 2.5, f: 3.0},\r\n            {a: 3.0, b: 3.5, c: 1.5, d: 5.0, e: 3.5, f: 3.0, g: 5.0}\r\n        );\r\n        // -> 0.396\r\n\r\n        or\r\n\r\n    wuzzy.pearson(\r\n            {a: 2.5, b: 1},\r\n            {o: 3.5, e: 6.0}\r\n        );\r\n        // -> 1.0\r\n\r\n### Params: \r\n\r\n* **Object** *a* - the first object to compare\r\n* **Object** *b* - the second object to compare\r\n\r\n### Return:\r\n\r\n* **Number** returns the pearson correlation for\r\n\r\n## jaccard(a, b)\r\n\r\nCalculates the jaccard index for the two\r\nprovided arrays.\r\n### Examples:\r\n\r\n    wuzzy.jaccard(\r\n            ['a', 'b', 'c', 'd', 'e', 'f'],\r\n            ['a', 'e', 'f']\r\n        );\r\n        // -> 0.5\r\n\r\n        or\r\n\r\n    wuzzy.jaccard(\r\n            'abcdef',\r\n            'aef'\r\n        );\r\n        // -> 0.5\r\n\r\n        or \r\n\r\n    wuzzy.jaccard(\r\n            ['abe', 'babe', 'cabe', 'dabe', 'eabe', 'fabe'],\r\n            ['babe']\r\n        );\r\n        // -> 0.16666667\r\n\r\n### Params: \r\n\r\n* **String|Array** *a* - the first string/array to compare\r\n* **String|Array** *b* - the second string/array to compare\r\n\r\n### Return:\r\n\r\n* **Number** returns the jaccard index for\r\n\r\n## tanimoto(a, b)\r\n\r\nCalculates the tanimoto distance (weighted jaccard index).\r\n### Examples:\r\n\r\n    wuzzy.tanimoto(\r\n            ['a', 'b', 'c', 'd', 'd', 'e', 'f', 'f'],\r\n            ['a', 'e', 'f']\r\n        );\r\n        // -> 0.375\r\n\r\n        or\r\n\r\n    wuzzy.tanimoto(\r\n            'abcddeff',\r\n            'aef'\r\n        );\r\n        // -> 0.375\r\n\r\n        or \r\n\r\n    wuzzy.tanimoto(\r\n            ['abe', 'babe', 'cabe', 'dabe', 'eabe', 'fabe', 'fabe'],\r\n            ['babe']\r\n        );\r\n        // -> 0.14285714\r\n\r\n### Params: \r\n\r\n* **String|Array** *a* - the first string/array to compare\r\n* **String|Array** *b* - the second string/array to compare\r\n\r\n### Return:\r\n\r\n* **Number** returns the tanimoto distance for\r\n\r\n<!-- End ./index.js -->\r\n\r\n\r\n","google":"UA-51690576-1","note":"Don't delete this file! It's used internally to help with page regeneration."}